SHELL := /usr/bin/env bash

green  = $(shell printf "\e[32;01m$1\e[0m")
yellow = $(shell printf "\e[33;01m$1\e[0m")
red    = $(shell printf "\e[33;31m$1\e[0m")

format = $(shell printf "%-40s %s" "$(call green,bin/$1)" $2)

comma:= ,

.DEFAULT_GOAL:=help

%:
	@:
# Ne pas utiliser dans les messages de caractères problématiques : ",", "'"
help:
	@echo ""
	@echo "$(call yellow,Daily Magento 2 bin/* commands)"
	@echo "$(call red,===============================)"
	@echo "$(call format,check-dependencies,'Provides helpful recommendations for dependencies.')"
	@echo "$(call format,composer,'Run the composer binary.')"
	@echo "$(call format,copyfromcontainer,'Copy specified folders or files from container to host.')"
	@echo "$(call format,copytocontainer,'Copy specified folders or files from host to container.')"
	@echo "$(call format,empty-generated,'empty generated folder to resolve dynamically DI')"
	@echo "$(call format,export-db,'Backup the Magento database.')"
	@echo "$(call format,git-switch,'Checkout d une autre Git sur Docker')"
	@echo "$(call format,grunt,'Run the grunt binary.')"
	@echo "$(call format,log,'Monitor the Magento log files. Pass no params to tail all files.')"
	@echo "$(call format,magento,'Run the Magento CLI.')"
	@echo "$(call format,magento-version,'Determine the Magento version installed in the current environment..')"
	@echo "$(call format,mysql,'Run the MySQL CLI with database config from env/db.env.')"
	@echo "$(call format,n98-magerun2,'Access the n98-magerun2 CLI.')"
	@echo "$(call format,pullfromgithub,'Mise à jour des fichiers sources Magento 2 sur Docker par rapport au HEAD de la branch courante')"
	@echo "$(call format,redis,'Run a command from the redis container.')"
	@echo "$(call format,reset-vendor,'Reinstallation du dossier vendor sur Docker')"
	@echo "$(call format,root,'Run any CLI command as root without going into the bash prompt.')"
	@echo "$(call format,rootnotty,'Run any CLI command as root with no TTY.')"
	@echo "$(call format,xdebug,'Disable or enable Xdebug. Accepts argument \`disable\`$(comma) \`enable\`$(comma) or \`status\`.')"

	@echo ""
	@echo "$(call yellow,Daily Docker bin/* commands)"
	@echo "$(call red,===============================)"
	@echo "$(call format,clinotty,'Run any CLI command with no TTY.')"
	@echo "$(call format,bash,'Drop into the bash prompt of your phpfpm Docker container.')"
	@echo "$(call format,docker-stats,'Display status for CPU$(comma) memory usage$(comma) and memory limit of currently-running Docker containers.')"
	@echo "$(call format,restart,'Stop and then start all containers.')"
	@echo "$(call format,service,'Permet de se connecter au shell du service Docker de notre choix')"
	@echo "$(call format,service-root,'Permet de se connecter en root au shell du service Docker de notre choix')"
	@echo "$(call format,start,'Start all containers.')"
	@echo "$(call format,status,'Check the container status.')"
	@echo "$(call format,stop,'Stop all project containers.')"
	@echo "$(call format,stopall,'Stop all docker running containers.')"
	@echo "$(call format,update,'Update to the latest version of docker-magento.')"

	@echo ""
	@echo "$(call yellow,Admin Magento 2 bin/* commands)"
	@echo "$(call red,===============================)"
	@echo "$(call format,create-user,'Create either an admin user or customer account.')"
	@echo "$(call format,cron,'Start or stop the cron service.')"

	@echo ""
	@echo "$(call yellow,Setup bin/* commands)"
	@echo "$(call red,===============================)"
	@echo "$(call format,clonefromgithub,'deploy Magento 2 github master or branch HEAD source files on Docker')"
	@echo "$(call format,conf-phpfpm,'Configure memory and cpu for better phpfpm performance.')"
	@echo "$(call format,copyalltocontainer,'Copy all magento 2 source files from a Windows folder to Docker.')"
	@echo "$(call format,docker-compose,'Support V1 and V2 docker compose command$(comma) and use custom configuration files.')"
	@echo "$(call format,fixowns,'This will fix filesystem ownerships within the container.')"
	@echo "$(call format,fixperms,'This will fix filesystem permissions within the container.')"
	@echo "$(call format,debug,'Menu pour déboguer automatiquement les problèmes prévisibles')"
	@echo "$(call format,import-db,'Import a database.')"
	@echo "$(call format,import-media,'Importe le dossier media et son contenu depuis le serveur recette.')"
	@echo "$(call format,install-magento,'Installation de Magento 2 sur Docker.')"
	@echo "$(call format,install-magento-sources,'Installation des fichiers sources Magento 2 sur Docker.')"
	@echo "$(call format,install-php-extensions,'Install PHP extension in the container.')"
	@echo "$(call format,paths,'Affichage de toutes les chemins du projet (media, clé ssh, etc.)')"
	@echo "$(call format,remove,'Remove all containers.')"
	@echo "$(call format,removeall,'Remove all containers$(comma) networks$(comma) volumes and images.')"
	@echo "$(call format,removenetwork,'Remove a network associated with the current directory name.')"
	@echo "$(call format,removevolumes,'Remove all volumes.')"
	@echo "$(call format,setup-composer-auth,'Setup authentication credentials for Composer.')"
	@echo "$(call format,setup-debian,'Configuration de la Debian pour recevoir docker-magento')"
	@echo "$(call format,setup-docker,'Configuration de l installation Docker sur la Debian')"
	@echo "$(call format,setup-domain,'Setup Magento domain name.')"
	@echo "$(call format,setup-domain-dn,'Modifie les URLs des boutiques dans la base de donnée')"
	@echo "$(call format,setup-domain-hosts,'Ajoute au fichier hosts de Windows les enregistrements DNS pour que les noms de domaine pointent vers Debian qui pointe vers service Docker nginx')"
	@echo "$(call format,setup-domain-ssl,'Création d une autorité de certification et de certificats de sécurité pour tous les noms de domaine')"
	@echo "$(call format,setup-github-ssh,'Création de la clé SSH pour la connexion à github.com')"
	@echo "$(call format,setup-github-ssh-win-copie,'Copy the generated ssh key github to Windows user session')"
	@echo "$(call format,setup-grunt,'Install and configure Grunt JavaScript task runner.')"
	@echo "$(call format,setup-magento,'Configuration de instance Magento 2 après son installation dans Docker.')"
	@echo "$(call format,setup-pwa-studio,'(BETA) Install PWA Studio.')"
	@echo "$(call format,setup-pwa-studio-sampledata,'This script makes it easier to install Venia sample data.')"
	@echo "$(call format,setup-recette,'Configuration des connections au serveur Recette.')"
	@echo "$(call format,setup-ssl,'Generate an SSL certificate for one or more domains.')"
	@echo "$(call format,setup-ssl-ca,'Generate a certificate authority and copy it to the host.')"
	@echo "$(call format,urls,'Affichage de toutes les URLs du projet (boutiques M2, etc.)')"

	@echo ""
	@echo "$(call yellow,Extra and untested bin/* commands)"
	@echo "$(call red,===============================)"
	@echo "$(call format,analyse,'[untested] Run phpstan analyse within the container to statically analyse code$(comma) passing in directory to analyse.')"
	@echo "$(call format,blackfire,'[untested] Disable or enable Blackfire. Accepts argument \`disable\`$(comma) \`enable\`$(comma) or \`status\`.')"
	@echo "$(call format,cache-clean,'[untested] Access the cache-clean CLI.')"
	@echo "$(call format,cli,'Run any CLI command without going into the bash prompt.')"
	@echo "$(call format,cliq,'[untested] Run any CLI command but pipe all output to /dev/null.')"
	@echo "$(call format,configure-linux,'[untested] Adds the Docker container IP address to /etc/hosts if not already present. Optionally enables port 9003 for Xdebug')"
	@echo "$(call format,deploy,'[untested] Runs the standard Magento deployment process commands. Pass extra locales besides \`en_US\` via an optional argument.')"
	@echo "$(call format,dev-urn-catalog-generate,'[untested] Generate URNs for PHPStorm and remap paths to local host.')"
	@echo "$(call format,dev-test-run,'[untested] Facilitates running PHPUnit tests for a specified test type.')"
	@echo "$(call format,devconsole,'Alias for n98-magerun2 dev:console.')"
	@echo "$(call format,download,'[untested] Download & extract specific Magento version to the src directory.')"
	@echo "$(call format,mftf,'[untested] Run the Magento MFTF.')"
	@echo "$(call format,node,'[untested] Run the node binary.')"
	@echo "$(call format,npm,'[untested] Run the npm binary.')"
	@echo "$(call format,phpcbf,'[untested] Auto-fix PHP_CodeSniffer errors with Magento2 options.')"
	@echo "$(call format,phpcs,'[untested] Run PHP_CodeSniffer with Magento2 options.')"
	@echo "$(call format,phpcs-json-report,'[untested] Run PHP_CodeSniffer with Magento2 options and save to \`report.json\` file.')"
	@echo "$(call format,pwa-studio,'[untested] (BETA) Start the PWA Studio server.')"
	@echo "$(call format,setup-install,'[untested] Automates the installation process for a Magento instance.')"
	@echo "$(call format,setup-integration-tests,'[untested] Script to set up integration tests.')"
	@echo "$(call format,xdebug-cli,'[untested] Enable Xdebug for bin/magento$(comma) with an optional argument of the IDE key. Defaults to PHPSTORM Ex. bin/debug-cli enable PHPSTORM')"
